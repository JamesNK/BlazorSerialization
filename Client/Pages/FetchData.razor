@page "/"
@inject IWebAssemblyHostEnvironment Env
@using System.Diagnostics
@using Grpc.Net.Client
@using Grpc.Net.Client.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.AspNetCore.Components.Rendering

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<form @onsubmit="Fetch">
    <div class="form-group">
        <label>Call type</label>
        <select class="form-control" @bind="callType">
            <option value="Json">JSON</option>
            <option value="GrpcWeb">grpc-web</option>
        </select>
    </div>
    <div class="form-group">
        <label>Call return count</label>
        <input class="form-control" type="text" @bind="returnCount">
    </div>
    <div class="form-group">
        <label>
            <input type="checkbox" @bind="shouldVirtualizeUi" />
            Virtualize UI
        </label>
    </div>
    <button class="btn btn-primary" disabled="@stopwatch.IsRunning">Fetch data</button>
</form>
<hr />
<br />

@if (error != null)
{
    <p><em>@error</em></p>
}
else if (stopwatch.IsRunning)
{
    <p><em>Loading...</em></p>
}
else if (grpcForecasts != null || jsonForecasts != null)
{
    <h4>Results</h4>
    <ul class="list-group">
        <li class="list-group-item">Data size: <b>@(Math.Round((double)bytesRead / 1024, 2)) kilobytes</b></li>
        <li class="list-group-item">Network time: <b>@Math.Round(headersSeconds, 2) seconds</b></li>
        <li class="list-group-item">Deserialization time: <b>@(Math.Round(totalSeconds - headersSeconds, 2)) seconds</b></li>

        @if (!renderingStopwatch.IsRunning && renderingStopwatch.Elapsed.TotalSeconds > 0)
        {
            <li class="list-group-item">Rendering time: <b>@Math.Round(renderingStopwatch.Elapsed.TotalSeconds, 2) seconds</b></li>
        }
    </ul>
    <br />

    <h4>Data</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @if (grpcForecasts != null)
            {
                if (virtualizeUi)
                {
                    <Virtualize Items="grpcForecasts" ChildContent="renderGrpcForecast" />
                }
                else
                {
                    foreach (var forecast in grpcForecasts)
                    {
                        @renderGrpcForecast(forecast);
                    }
                }
            }
            else if (jsonForecasts != null)
            {
                if (virtualizeUi)
                {
                    <Virtualize Items="jsonForecasts" ChildContent="renderJsonForecast" />
                }
                else
                {
                    foreach (var forecast in jsonForecasts)
                    {
                        @renderJsonForecast(forecast);
                    }
                }
            }
        </tbody>
    </table>
}

@code {
    private HttpClient httpClient = default!;
    private WeatherForecasts.WeatherForecastsClient grpcWebClient = default!;
    private WeatherForecasts.WeatherForecastsClient grpcWebTextClient = default!;
    private Stopwatch stopwatch = default!;
    private Stopwatch renderingStopwatch = new Stopwatch();
    private BenchmarkHttpHandler httpHandler = default!;

    private IList<WeatherForecast>? grpcForecasts;
    private IList<WeatherForecastViewModel>? jsonForecasts;
    private double totalSeconds;
    private double headersSeconds;
    private int bytesRead;
    private bool virtualizeUi;

    private CallType callType;
    private int returnCount;
    private string? error;
    private bool shouldVirtualizeUi = true;

    private async Task Fetch()
    {
        if (returnCount < 0 || returnCount > 999999)
        {
            error = "Return count must be between 0 and 999999";
            return;
        }

        try
        {
            error = null;
            grpcForecasts = null;
            jsonForecasts = null;
            virtualizeUi = shouldVirtualizeUi;
            stopwatch.Start();

            switch (callType)
            {
                case CallType.Json:
                    {
                        jsonForecasts = await httpClient.GetFromJsonAsync<WeatherForecastViewModel[]>("/weatherforecast?returnCount=" + returnCount);
                        break;
                    }
                case CallType.GrpcWeb:
                    {
                        grpcForecasts = (await grpcWebClient.GetWeatherForecastsAsync(new GetWeatherForecastsRequest { ReturnCount = returnCount })).Forecasts;
                        break;
                    }
                case CallType.GrpcWebText:
                    {
                        grpcForecasts = (await grpcWebTextClient.GetWeatherForecastsAsync(new GetWeatherForecastsRequest { ReturnCount = returnCount })).Forecasts;
                        break;
                    }
                default:
                    throw new ArgumentOutOfRangeException();
            }

            bytesRead = httpHandler.BytesRead!.Value;
            headersSeconds = httpHandler.HeadersReceivedElapsed!.Value.TotalSeconds;
            totalSeconds = stopwatch.Elapsed.TotalSeconds;
        }
        catch (Exception ex)
        {
            error = "Error fetching data: " + ex.ToString();
        }
        finally
        {
            stopwatch.Reset();
        }

        renderingStopwatch.Reset();
        renderingStopwatch.Start();
    }

    protected override Task OnInitializedAsync()
    {
        stopwatch = new Stopwatch();
        httpHandler = new BenchmarkHttpHandler(stopwatch, new HttpClientHandler());
        httpClient = new HttpClient(httpHandler)
        {
            BaseAddress = new Uri(Env.BaseAddress)
        };
        grpcWebClient = CreateClient(GrpcWebMode.GrpcWeb);
        grpcWebTextClient = CreateClient(GrpcWebMode.GrpcWebText);
        returnCount = 10000;

        return Task.CompletedTask;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (renderingStopwatch.IsRunning)
        {
            renderingStopwatch.Stop();
            StateHasChanged();
        }
    }

    private WeatherForecasts.WeatherForecastsClient CreateClient(GrpcWebMode grpcWebMode)
    {
        var channel = GrpcChannel.ForAddress(Env.BaseAddress, new GrpcChannelOptions
        {
            HttpHandler = new GrpcWebHandler(grpcWebMode, httpHandler),
            MaxReceiveMessageSize = null
        });

        return new WeatherForecasts.WeatherForecastsClient(channel);
    }

    private static RenderFragment<WeatherForecastViewModel> renderJsonForecast = forecast => __builder =>
    {
    <tr @key="forecast.Date">
        <td>@forecast.Date.ToShortDateString()</td>
        <td>@forecast.TemperatureC</td>
        <td>@forecast.TemperatureF</td>
        <td>@forecast.Summary</td>
    </tr>
    };

    private static RenderFragment<WeatherForecast> renderGrpcForecast = forecast => __builder =>
    {
    <tr @key="forecast.Date">
        <td>@forecast.DateTime.ToShortDateString()</td>
        <td>@forecast.TemperatureC</td>
        <td>@forecast.TemperatureF</td>
        <td>@forecast.Summary</td>
    </tr>
    };

    private enum CallType
    {
        Json,
        GrpcWeb,
        GrpcWebText
    }

    private class WeatherForecastViewModel
    {
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
