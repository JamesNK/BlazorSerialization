@page "/fetchdata"
@inject Microsoft.AspNetCore.Components.WebAssembly.Hosting.IWebAssemblyHostEnvironment Env
@using Google.Protobuf.WellKnownTypes
@using Grpc.Net.Client
@using Grpc.Net.Client.Web

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<form @onsubmit="Fetch">
    <div class="form-group">
        <label>Call type</label>
        <select class="form-control" @bind="callType">
            <option value="Json">JSON</option>
            <option value="GrpcWeb">grpc-web</option>
            <option value="GrpcWebText">grpc-web-text</option>
        </select>
    </div>
    <div class="form-group">
        <label>Call return count</label>
        <input class="form-control" type="text" @bind="returnCount">
    </div>
    <button class="btn btn-primary" disabled="@(stopwatch != null)">Fetch data</button>
</form>
<br />

@if (stopwatch != null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (grpcForecasts != null)
    {
        <p>Results loaded in <b>@totalSeconds seconds</b>. Displaying first 10:</p>

        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var f in grpcForecasts.Take(10))
                {
                    <tr>
                        <td>@f.DateTime.ToShortDateString()</td>
                        <td>@f.TemperatureC</td>
                        <td>@f.TemperatureF</td>
                        <td>@f.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else if (jsonForecasts != null)
    {
        <p>Results loaded in <b>@totalSeconds seconds</b>. Displaying first 10:</p>

        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var f in jsonForecasts.Take(10))
                {
                    <tr>
                        <td>@f.Date.ToShortDateString()</td>
                        <td>@f.TemperatureC</td>
                        <td>@f.TemperatureF</td>
                        <td>@f.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private IList<WeatherForecast>? grpcForecasts;
    private IList<WeatherForecastViewModel>? jsonForecasts;
    private System.Diagnostics.Stopwatch? stopwatch;
    private double totalSeconds;
    private CallType callType;
    private int returnCount;
    private HttpClient httpClient = default!;
    private WeatherForecasts.WeatherForecastsClient grpcWebClient = default!;
    private WeatherForecasts.WeatherForecastsClient grpcWebTextClient = default!;

    private async Task Fetch()
    {
        grpcForecasts = null;
        jsonForecasts = null;
        stopwatch = System.Diagnostics.Stopwatch.StartNew();

        switch (callType)
        {
            case CallType.Json:
                {
                    jsonForecasts = await httpClient.GetFromJsonAsync<WeatherForecastViewModel[]>("/weatherforecast?returnCount=" + returnCount);
                    break;
                }
            case CallType.GrpcWeb:
                {
                    grpcForecasts = (await grpcWebClient.GetWeatherForecastsAsync(new GetWeatherForecastsRequest { ReturnCount = returnCount })).Forecasts;
                    break;
                }
            case CallType.GrpcWebText:
                {
                    grpcForecasts = (await grpcWebTextClient.GetWeatherForecastsAsync(new GetWeatherForecastsRequest { ReturnCount = returnCount })).Forecasts;
                    break;
                }
            default:
                throw new ArgumentOutOfRangeException();
        }

        totalSeconds = stopwatch.Elapsed.TotalSeconds;
        stopwatch = null;
    }

    protected override Task OnInitializedAsync()
    {
        httpClient = new HttpClient { BaseAddress = new Uri(Env.BaseAddress) };
        grpcWebClient = CreateClient(GrpcWebMode.GrpcWeb);
        grpcWebTextClient = CreateClient(GrpcWebMode.GrpcWebText);
        returnCount = 5000;

        return Task.CompletedTask;
    }

    private WeatherForecasts.WeatherForecastsClient CreateClient(GrpcWebMode grpcWebMode)
    {
        var channel = GrpcChannel.ForAddress(Env.BaseAddress, new GrpcChannelOptions
        {
            HttpHandler = new GrpcWebHandler(grpcWebMode, new HttpClientHandler()),
            MaxReceiveMessageSize = null
        });

        return new WeatherForecasts.WeatherForecastsClient(channel);
    }

    private enum CallType
    {
        Json,
        GrpcWeb,
        GrpcWebText
    }

    private class WeatherForecastViewModel
    {
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
